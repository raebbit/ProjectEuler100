"""
Project Euler: Problem 12: Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:

1: 1
3: 1, 3
6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over n divisors?(website : over five hundred)
"""
import math

def divisible_triangle_numbers(n):
    if int(n) == 1:
        return 3
    else:
        index = 1
        divisor_count = 0
        while divisor_count <= int(n):
            divisor_count = 0
            triangle_num = index * (index + 1) // 2 
            index += 1

            # triangle number is not prime and always have the even number of disivors except 1.
            for i in range(1, int(math.sqrt(triangle_num))+1): 
                if triangle_num % i == 0:
                    divisor_count += 1
                else:
                    continue
            divisor_count *= 2
        
        return triangle_num

if __name__ == "__main__":
    n = input("n divisors: ")
    print(divisible_triangle_numbers(n))
